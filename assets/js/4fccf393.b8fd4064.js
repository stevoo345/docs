"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[134],{2929:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>g,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"dotnet/serilog","title":"Serilog","description":"Install Nuget","source":"@site/docs/dotnet/serilog.md","sourceDirName":"dotnet","slug":"/dotnet/serilog","permalink":"/docs/dotnet/serilog","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Redirect Extension","permalink":"/docs/dotnet/root-redirect"},"next":{"title":"Docker","permalink":"/docs/category/docker"}}');var o=t(4848),r=t(8453);const s={},g="Serilog",l={},a=[{value:"Install Nuget",id:"install-nuget",level:2},{value:"Code",id:"code",level:2},{value:"Http Logging",id:"http-logging",level:2},{value:"Http Logging Interceptor",id:"http-logging-interceptor",level:2},{value:"Debugging",id:"debugging",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"serilog",children:"Serilog"})}),"\n",(0,o.jsx)(n.h2,{id:"install-nuget",children:"Install Nuget"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Serilog.AspNetCore"}),"\n",(0,o.jsx)(n.li,{children:"Serilog.Settings.Configuration (Appsettings configuration)"}),"\n",(0,o.jsx)(n.li,{children:"Serilog.Enrichers.ClientInfo (CorrelationId)"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"builder.Host.UseSerilog((context, config) =>\n{\n    config.ReadFrom.Configuration(context.Configuration);\n});\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="appsettings.json"',children:'{\n    "Serilog": {\n        "Using": [\n            "Serilog.Sinks.Console"\n        ],\n        "MinimumLevel": {\n            "Default": "Information",\n            "Override": {\n                "Microsoft.AspNetCore": "Warning",\n                "Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware": "Fatal",\n                "Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware": "Information"\n            }\n        },\n        "WriteTo": [\n            {\n                "Name": "Console",\n                "Args": {\n                    "outputTemplate": "[{Timestamp:yyyy-MM-dd HH:mm:ss} {Level:u3}] ({CorrelationId}) {Message}{NewLine}{Exception}"\n                }\n            }\n        ],\n        "Enrich": [\n            "FromLogContext",\n            {\n                "Name": "WithCorrelationId",\n                "Args": {\n                    "headerName": "correlation-id",\n                    "addValueIfHeaderAbsence": true\n                }\n            }\n        ],\n        "Properties": {\n            "Application": "Timeline"\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"http-logging",children:"Http Logging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"builder.Services.AddHttpLogging(options =>\n{\n    options.LoggingFields = HttpLoggingFields.RequestPath | HttpLoggingFields.RequestBody |\n                            HttpLoggingFields.RequestMethod | HttpLoggingFields.RequestQuery |\n                            HttpLoggingFields.ResponseBody | HttpLoggingFields.Duration;\n    options.RequestBodyLogLimit = 2028;\n    options.ResponseBodyLogLimit = 2028;\n    //options.CombineLogs = true;\n});\n\n// Needed for Correlation Id to work\nbuilder.Services.AddHttpContextAccessor();\n...\n\napp.UseHttpLogging();\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'lines title="appsettings.json"',children:'{\n    "Serilog": {\n        "MinimumLevel": {\n            "Override": {\n                // ...\n                "Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware": "Information"\n            }\n        }\n    }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Mehr Info unter: ",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/de-de/aspnet/core/fundamentals/http-logging/?view=aspnetcore-9.0",children:"https://learn.microsoft.com/de-de/aspnet/core/fundamentals/http-logging/?view=aspnetcore-9.0"})]}),"\n",(0,o.jsx)(n.h2,{id:"http-logging-interceptor",children:"Http Logging Interceptor"}),"\n",(0,o.jsxs)(n.p,{children:["Mittels Http Logging Interceptor lassen sich das http logging verhalten anpassen.\nUnten gibt es ein Beispiel f\xfcr wie man spezielle Pfade exkludieren k\xf6nnte vom Logging.\n",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/http-logging/?view=aspnetcore-9.0#ihttplogginginterceptor",children:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/http-logging/?view=aspnetcore-9.0#ihttplogginginterceptor"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'title="HttpLoggingInterceptor.cs"',children:'internal sealed class HttpLoggingInterceptor : IHttpLoggingInterceptor\n{\n    public ValueTask OnRequestAsync(HttpLoggingInterceptorContext logContext)\n    {\n        IReadOnlyList<string> excludedPaths = ["/scalar/", "/openapi/"];\n        if (excludedPaths.Any(prefix => logContext.HttpContext.Request.Path.Value?.StartsWith(prefix) ?? false))\n            logContext.LoggingFields = HttpLoggingFields.None;\n\n        return default;\n    }\n\n    public ValueTask OnResponseAsync(HttpLoggingInterceptorContext logContext)\n    {\n        return default;\n    }\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"builder.Services.AddHttpLogging(options =>\n{\n    ...\n});\nbuilder.Services.AddHttpLoggingInterceptor<HttpLoggingInterceptor>();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,o.jsx)(n.p,{children:"Falls es mal Probleme geben sollte und nichts in die Logs selbst geschrieben wird."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"// Enable Serilog self-logging to debug Elasticsearch sink issues\nSelfLog.Enable(msg => Debug.WriteLine(msg));\nSelfLog.Enable(Console.Error);\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>g});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function g(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);