"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[134],{2929:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"dotnet/serilog","title":"Serilog","description":"Install Nuget","source":"@site/docs/dotnet/serilog.md","sourceDirName":"dotnet","slug":"/dotnet/serilog","permalink":"/docs/dotnet/serilog","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Redirect Extension","permalink":"/docs/dotnet/root-redirect"},"next":{"title":"Docker","permalink":"/docs/category/docker"}}');var o=t(4848),r=t(8453);const i={},a="Serilog",d={},l=[{value:"Install Nuget",id:"install-nuget",level:2},{value:"Code",id:"code",level:2},{value:"Request Response Logging",id:"request-response-logging",level:2}];function g(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"serilog",children:"Serilog"})}),"\n",(0,o.jsx)(n.h2,{id:"install-nuget",children:"Install Nuget"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Serilog.AspNetCore"}),"\n",(0,o.jsx)(n.li,{children:"Serilog.Settings.Configuration"}),"\n",(0,o.jsx)(n.li,{children:"Serilog.Enrichers.ClientInfo"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'title="programm.cs"',children:"builder.Host.UseSerilog((context, config) =>\n{\n    config.ReadFrom.Configuration(context.Configuration);\n});\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="appsettings.json"',children:'{\n    "Serilog": {\n        "Using": [\n            "Serilog.Sinks.Console"\n        ],\n        "MinimumLevel": {\n            "Default": "Information",\n            "Override": {\n                "Microsoft.AspNetCore": "Warning",\n                "Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware": "Fatal"\n            }\n        },\n        "WriteTo": [\n            {\n                "Name": "Console",\n                "Args": {\n                    "outputTemplate": "[{Timestamp:yyyy-MM-dd HH:mm:ss} {Level:u3}] ({CorrelationId}) {Message}{NewLine}{Exception}"\n                }\n            }\n        ],\n        "Enrich": [\n            "FromLogContext",\n            {\n                "Name": "WithCorrelationId",\n                "Args": {\n                    "headerName": "correlation-id",\n                    "addValueIfHeaderAbsence": true\n                }\n            }\n        ],\n        "Properties": {\n            "Application": "Timeline"\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"request-response-logging",children:"Request Response Logging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'title="RequestResponseLoggingOptions.cs"',children:"public class RequestResponseLoggingOptions\n{\n    public HashSet<string> ExcludePathStartsWith { get; set; } = [];\n    public int MaxBodyLength { get; set; } = 2048;\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'title="RequestResponseLoggingMiddleware.cs"',children:'public class RequestResponseLoggingMiddleware(\n    RequestDelegate next,\n    ILogger<RequestResponseLoggingMiddleware> logger,\n    IOptions<RequestResponseLoggingOptions> requestResponseLoggingOptions)\n{\n    private readonly RequestResponseLoggingOptions _options = requestResponseLoggingOptions.Value;\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        // Skip logging for excluded paths\n        if (_options.ExcludePathStartsWith.Any(prefix => context.Request.Path.Value!.StartsWith(prefix)))\n        {\n            await next(context);\n            return;\n        }\n\n        // Log the request\n        context.Request.EnableBuffering();\n        var requestBody = await ReadStreamAsync(context.Request.Body);\n        var queryString = context.Request.QueryString.HasValue ? context.Request.QueryString.Value : string.Empty;\n        var truncatedRequestBody = TruncateBody(requestBody);\n        logger.LogInformation(\n            $"Request: {context.Request.Method} {context.Request.Path}{queryString} {truncatedRequestBody}");\n        context.Request.Body.Position = 0;\n\n        // Capture the response\n        var originalResponseBodyStream = context.Response.Body;\n        using var responseBody = new MemoryStream();\n        context.Response.Body = responseBody;\n\n        await next(context);\n\n        // Log the response\n        context.Response.Body.Seek(0, SeekOrigin.Begin);\n        var responseBodyText = await new StreamReader(context.Response.Body).ReadToEndAsync();\n        var truncatedResponseBody = TruncateBody(responseBodyText);\n        logger.LogInformation($"Response: {context.Response.StatusCode} {truncatedResponseBody}");\n        context.Response.Body.Seek(0, SeekOrigin.Begin);\n\n        await responseBody.CopyToAsync(originalResponseBodyStream);\n    }\n\n    private async Task<string> ReadStreamAsync(Stream stream)\n    {\n        using var reader = new StreamReader(stream, Encoding.UTF8, leaveOpen: true);\n        var result = await reader.ReadToEndAsync();\n        stream.Seek(0, SeekOrigin.Begin);\n        return result;\n    }\n\n    private string TruncateBody(string body)\n    {\n        if (body.Length > _options.MaxBodyLength) return body[.._options.MaxBodyLength] + "... [TRUNCATED]";\n        return body;\n    }\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'title="programm.cs"',children:'builder.Services\n    .AddOptions<RequestResponseLoggingOptions>()\n    .Bind(builder.Configuration.GetSection("RequestResponseLogging"))\n    .ValidateDataAnnotations()\n    .ValidateOnStart();\n    \n...\n\napp.UseMiddleware<RequestResponseLoggingMiddleware>();\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="appsettings.json"',children:'{\n    "RequestResponseLogging": {\n        "ExcludePathStartsWith": [\n            "/scalar/",\n            "/openapi/"\n        ],\n        "MaxBodyLength": 2048\n    }\n}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);